// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { ListarExpositoresData, ListarExpositoresResponse, CriarExpositorData, CriarExpositorResponse, DeletarExpositorData, DeletarExpositorResponse, ObterExpositorData, ObterExpositorResponse, AtualizarExpositorData, AtualizarExpositorResponse, ListarPecasData, ListarPecasResponse, CriarPecaData, CriarPecaResponse, DeletarPecaData, DeletarPecaResponse, ObterPecaData, ObterPecaResponse, AtualizarPecaData, AtualizarPecaResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Listar Expositores
 */
export const listarExpositores = <ThrowOnError extends boolean = false>(options?: Options<ListarExpositoresData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListarExpositoresResponse, unknown, ThrowOnError>({
        url: '/api/expositores',
        ...options
    });
};

/**
 * Criar Expositor
 */
export const criarExpositor = <ThrowOnError extends boolean = false>(options: Options<CriarExpositorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CriarExpositorResponse, unknown, ThrowOnError>({
        url: '/api/expositores',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Deletar Expositor
 */
export const deletarExpositor = <ThrowOnError extends boolean = false>(options: Options<DeletarExpositorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletarExpositorResponse, unknown, ThrowOnError>({
        url: '/api/expositores/{expositor_id}',
        ...options
    });
};

/**
 * Obter Expositor
 */
export const obterExpositor = <ThrowOnError extends boolean = false>(options: Options<ObterExpositorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ObterExpositorResponse, unknown, ThrowOnError>({
        url: '/api/expositores/{expositor_id}',
        ...options
    });
};

/**
 * Atualizar Expositor
 */
export const atualizarExpositor = <ThrowOnError extends boolean = false>(options: Options<AtualizarExpositorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AtualizarExpositorResponse, unknown, ThrowOnError>({
        url: '/api/expositores/{expositor_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Listar Pecas
 */
export const listarPecas = <ThrowOnError extends boolean = false>(options?: Options<ListarPecasData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListarPecasResponse, unknown, ThrowOnError>({
        url: '/api/pecas',
        ...options
    });
};

/**
 * Criar Peca
 */
export const criarPeca = <ThrowOnError extends boolean = false>(options: Options<CriarPecaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CriarPecaResponse, unknown, ThrowOnError>({
        url: '/api/pecas',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Deletar Peca
 */
export const deletarPeca = <ThrowOnError extends boolean = false>(options: Options<DeletarPecaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletarPecaResponse, unknown, ThrowOnError>({
        url: '/api/pecas/{peca_id}',
        ...options
    });
};

/**
 * Obter Peca
 */
export const obterPeca = <ThrowOnError extends boolean = false>(options: Options<ObterPecaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ObterPecaResponse, unknown, ThrowOnError>({
        url: '/api/pecas/{peca_id}',
        ...options
    });
};

/**
 * Atualizar Peca
 */
export const atualizarPeca = <ThrowOnError extends boolean = false>(options: Options<AtualizarPecaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AtualizarPecaResponse, unknown, ThrowOnError>({
        url: '/api/pecas/{peca_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};